pipeline {
    agent any
    environment {
        DOCKER_IMAGE_NAME = 'unreal-engines'
        DOCKER_REGISTRY = 'docker.io/maraboyinimadan'
        KUBECONFIG_CRED = 'k8s-kubeconfig' // Jenkins credential ID for kubeconfig
        K8S_DEPLOYMENT_FILE = 'k8s-taxi-booking.yaml' // Path to Kubernetes YAML file
    }
    stages {
        stage('GIT-Checkout') {
            steps {
                git branch: 'dev', url: 'https://github.com/madanfmw/taxi-booking.git'
            }
        }
        stage('Get Commit Hash') {
            steps {
                script {
                    env.GIT_COMMIT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    sh 'mvn clean package'
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    sh """
                    docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${GIT_COMMIT} .
                    """
                }
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        def imageTag = "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${GIT_COMMIT}"
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        sh "docker push ${imageTag}"
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([file(credentialsId: KUBECONFIG_CRED, variable: 'KUBECONFIG')]) {
                        sh "kubectl apply -f ${K8S_DEPLOYMENT_FILE} --kubeconfig=${KUBECONFIG}"
                        sh "kubectl set image deployment/taxi-booking-deployment taxi-booking-container=${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${GIT_COMMIT} --kubeconfig=${KUBECONFIG}"
                    }
                }
            }
        }
        stage('Notify Slack') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'slack-token', variable: 'SLACK_TOKEN')]) {
                        slackSend(
                            channel: '#ci-cd-buildstatus',
                            color: currentBuild.currentResult == 'SUCCESS' ? 'good' : 'danger',
                            message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} \nBuild ${env.BUILD_NUMBER} \nMore info: ${env.BUILD_URL}",
                            tokenCredentialId: 'slack-token'
                        )
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                echo "Pipeline finished with result: ${currentBuild.currentResult}"
            }
        }
    }
}
