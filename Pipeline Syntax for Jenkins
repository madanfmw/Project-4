# Tools used in this pipeline git-hub, Maven, Docker, Slack
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pipeline {
    agent any
    environment {
        SLACK_CHANNEL = 'ci-cd-buildstatus' // Slack channel for notifications
        DOCKER_IMAGE_NAME = 'unreal-engines'
        DOCKER_REGISTRY = 'docker.io/maraboyinimadan' // Docker Registry
    }
    stages {
        stage('GIT-Checkout') {
            steps {
                // Checkout code from Git repository
                git branch: 'dev', url: 'https://github.com/madanfmw/taxi-booking.git'
            }
        }
        stage('Get Commit Hash') {
            steps {
                script {
                    // Fetch the latest commit hash
                    env.GIT_COMMIT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                }
            }
        }
        stage('Build') {
            steps {
                // Build the Maven project
                sh 'mvn clean package'
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    // Build Docker image
                    sh """
                    docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${GIT_COMMIT} .
                    """
                }
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    // Login to Docker and push the image
                    withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        def imageTag = "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${GIT_COMMIT}"
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        sh "docker push ${imageTag}"
                    }
                }
            }
        }
        stage('Notify Slack') {
            steps {
                script {
                    // Slack notification
                    withCredentials([string(credentialsId: 'slack-token', variable: 'SLACK_TOKEN')]) {
                        def color = currentBuild.currentResult == 'SUCCESS' ? 'good' : (currentBuild.currentResult == 'FAILURE' ? 'danger' : 'warning')
                        def message = "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} \n Build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
                        slackSend(channel: SLACK_CHANNEL, color: color, message: message)
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline completed'
        }
    }
}
